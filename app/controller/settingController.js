/*
 * File: app/controller/settingController.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.settingController', {
    extend: 'Ext.app.Controller',

    config: {
        stores: [
            'systemVarStore'
        ],

        refs: {
            settingForm: '#settingFormID',
            mobilePhone: '#SettingSystem_mobilePhone',
            email: '#SettingSystem_email',
            executeView: '#executeViewID'
        },

        control: {
            "#testConnectID": {
                tap: 'onTestConnectIDTap'
            },
            "#loginWayID": {
                change: 'onLoginWayIDChange'
            },
            "#settingSaveButton": {
                tap: 'onSettingSaveButtonTap'
            },
            "#settingFormID": {
                show: 'onSettingFormIDShow'
            }
        }
    },

    onTestConnectIDTap: function(button, e, eOpts) {

        var values = this.getSettingForm().getValues();
        console.log(values);
        var proxy = values.System_ProxyRootURL;
        var loginWay = values.loginWay;

        var username;
        if (loginWay === 'mobilePhone')
        username = values.System_mobilePhone;
        else
        username = values.System_email;

        console.log(values);

        var password = values.System_Password;
        var remember = values.System_RememberPass;
        var timeout = values.System_ProxyTimeout;

        this.testLinkSave(proxy, timeout, username, password, remember);
    },

    onLoginWayIDChange: function(selectfield, newValue, oldValue, eOpts) {
        if (newValue === 'mobilePhone') {
            this.getMobilePhone().setHidden(false);
            this.getEmail().setHidden(true);
        } else {
            this.getMobilePhone().setHidden(true);
            this.getEmail().setHidden(false);
        }
    },

    onSettingSaveButtonTap: function(button, e, eOpts) {
        var values = this.getSettingForm().getValues();

        this.save(values);

        this.getExecuteView().pop();
    },

    onSettingFormIDShow: function(component, eOpts) {
        this.readSystemConfig();

        console.log("settingForm Show systemConfig", systemConfig);

        /*  测试不成功
        this.getSettingForm().setRecord(systemConfig);
        */

        this.getSettingForm().setValues({
            System_ProxyRootURL: systemConfig.System_ProxyRootURL

            /* ToDo 增加其他系统参数 */
        });

    },

    readSystemConfig: function() {
        var rememberPassword = this.getValue('System_RememberPass', null);

        var url = this.getValue('System_ProxyRootURL', null);
        var loginWay = this.getValue('LoginWay', -1);
        var mobilePhone = this.getValue('System_mobilePhone', null);
        var emailValue = this.getValue('System_email', null);
        var password = this.getValue('System_Password', null);

        if (url == null)
        systemConfig = null;
        else
        systemConfig = {
            System_ProxyRootURL: url,
            System_mobilePhone: mobilePhone,
            System_email: emailValue,
            loginWay: loginWay,
            System_Password: password,
            System_RememberPass: rememberPassword
        };
    },

    save: function(params) {

        console.log("function save");
        console.log(params);

        var remember = Number(params.System_RememberPass);
        this.removeAll();
        this.setValue('SettingSystem_DashboardRefreshTime', params.System_DashboardRevenuePeriod);
        this.setValue('System_DashboardRefreshTime', params.System_DashboardRefreshTime);
        this.setValue('System_LastOpenFlag', params.System_RememberLastOpen);
        this.setValue('System_LastOpenModule', '');
        this.setValue('System_ProxyRootURL', params.System_ProxyRootURL);
        this.setValue('System_ProxyTimeout', params.System_ProxyTimeout);
        this.setValue('System_RecordsPerPage', params.System_RecordsPerPage);
        this.setValue('System_RememberPass', remember);
        this.setValue('System_email', params.System_email);
        this.setValue('System_mobilePhone', params.System_mobilePhone);
        this.setValue('loginWay', params.loginWay);

        if (remember == 1)
        this.setValue('System_Password', params.System_Password);

        MyApp.loginPwd = '';
    },

    removeAll: function() {
        var store = Ext.data.StoreManager.lookup('systemVarStoreID');
        while(store.data.length > 0){
            store.removeAt(0);
            store.sync();
        }
    },

    getValue: function(sysKey, defaultValue) {
        var store = Ext.data.StoreManager.lookup('systemVarStoreID');
        var index = store.find('key', sysKey);
        if(index >= 0){
            return store.getAt(index).data.value;
        }else
        return defaultValue;
    },

    setValue: function(sysKey, sysValue) {

        if (sysValue !== null) {
            var store = Ext.data.StoreManager.lookup('systemVarStoreID');
            var index = store.findExact('key', sysKey);
            if(index >= 0){
                store.removeAt(index);
                store.sync();
            }


            var sysVar = new MyApp.model.systemVarModel({
                key: sysKey, 
                value: sysValue
            });
            store.add(sysVar);
            store.sync();
        }
    },

    setSystemConfigByForm: function() {
        var settingFrm = Ext.create('MyApp.view.settingView');
        this.getExecuteView().push(settingFrm);
    }

});